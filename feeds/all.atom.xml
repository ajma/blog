<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrew Ma</title><link href="http://andrewma.com/" rel="alternate"></link><link href="http://andrewma.com/feeds/all.atom.xml" rel="self"></link><id>http://andrewma.com/</id><updated>2013-05-18T00:00:00-07:00</updated><entry><title>Resolving "SDK does not have any Build Tools installed" error</title><link href="http://andrewma.com/2013/05/18/resolving-sdk-does-not-have-any-build-tools-installed-error/" rel="alternate"></link><updated>2013-05-18T00:00:00-07:00</updated><author><name>Andrew Ma</name></author><id>tag:andrewma.com,2013-05-18:2013/05/18/resolving-sdk-does-not-have-any-build-tools-installed-error/</id><summary type="html">&lt;p&gt;After upgrading my Android SDK to 22, I started running into failed builds with the error message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{android-sdk}/tools/ant/build.xml:479: SDK does not have any Build Tools installed
&lt;/pre&gt;
&lt;p&gt;Couldn’t find very much on the web on how to resolve this and eventually I realized that it was because I only updated existing packages. In SDK 22, the platform tools and build tools are split up into their own items in the SDK manager.&lt;/p&gt;
&lt;p&gt;Make sure you install the build-tools and platform-tools.&lt;/p&gt;
</summary><category term="android"></category><category term="android-sdk"></category></entry><entry><title>Bubbling OnClick events</title><link href="http://andrewma.com/2012/05/11/bubbling-onclick-events/" rel="alternate"></link><updated>2012-05-11T00:00:00-07:00</updated><author><name>Andrew Ma</name></author><id>tag:andrewma.com,2012-05-11:2012/05/11/bubbling-onclick-events/</id><summary type="html">&lt;p&gt;Today, I ran into a problem where I needed to bubble up the OnClick event. Inside of a RelativeLayout, I had a TextView which I had to make clickable (so that it could get some animation) because of this, the OnClickevent got swallowed up. To get around this, in the constructor, I create an &lt;a class="reference external" href="http://developer.android.com/reference/android/view/View.OnClickListener.html"&gt;OnClickListener&lt;/a&gt; which would simply call &lt;a class="reference external" href="http://developer.android.com/reference/android/view/View.html#performClick()"&gt;performClick()&lt;/a&gt; from the parent.&lt;/p&gt;
&lt;p&gt;Here's how it goes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mTitleView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TitleView&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mTitleView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setOnClickListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;performClick&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="android"></category><category term="events"></category><category term="onclick"></category></entry><entry><title>Android Lifecycle for two activities</title><link href="http://andrewma.com/2012/01/24/android-lifecycle-for-two-activities/" rel="alternate"></link><updated>2012-01-24T00:00:00-08:00</updated><author><name>Andrew Ma</name></author><id>tag:andrewma.com,2012-01-24:2012/01/24/android-lifecycle-for-two-activities/</id><summary type="html">&lt;p&gt;Today, I ran into some problems of not understanding how the lifecycle of two activities. When one activity starts another activity, when does the &lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onPause()"&gt;onPause&lt;/a&gt;/&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onStop()"&gt;onStop&lt;/a&gt;/&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onDestroy()"&gt;onDestroy&lt;/a&gt; run in comparison to the &lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onCreate()"&gt;onCreate&lt;/a&gt;/&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onStart()"&gt;onStart&lt;/a&gt;/&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onResume()"&gt;onResume&lt;/a&gt; of the next activity. I put some logging in and here are the results:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;A&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onCreate()"&gt;onCreate&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;A&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onStart()"&gt;onStart&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;A&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onResume()"&gt;onResume&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;A&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onPause()"&gt;onPause&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;B&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onCreate()"&gt;onCreate&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;B&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onStart()"&gt;onStart&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;B&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onResume()"&gt;onResume&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Activity&lt;strong&gt;A&lt;/strong&gt;.&lt;a class="reference external" href="http://developer.android.com/reference/android/app/Activity.html#onStop()"&gt;onStop&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For official docs about this, see: &lt;a class="reference external" href="http://developer.android.com/guide/topics/fundamentals/activities.html#CoordinatingActivities"&gt;Coordinating Activities&lt;/a&gt;&lt;/p&gt;
</summary><category term="android"></category><category term="activity-lifecycle"></category></entry><entry><title>Find Used Memory Slots via Command Line</title><link href="http://andrewma.com/2012/01/14/find-used-memory-slots-via-command-line/" rel="alternate"></link><updated>2012-01-14T00:00:00-08:00</updated><author><name>Andrew Ma</name></author><id>tag:andrewma.com,2012-01-14:2012/01/14/find-used-memory-slots-via-command-line/</id><summary type="html">&lt;p&gt;Yesterday, I was going to order some more ram for my laptop and I didn’t have a  screwdriver around to check if the 4gb in my current setup was composed of one 4gb dimm or 2 x 2gb dimm. I found a nifty command-line options (Windows only) to display this information for me.&lt;/p&gt;
&lt;p&gt;wmic MEMORYCHIP get banklabel, capacity, caption, devicelocator, partnumber&lt;/p&gt;
&lt;p&gt;via &lt;a class="reference external" href="http://support.risualblogs.com/blog/2010/05/04/find-used-memory-slots-via-command-line/"&gt;Find Used Memory Slots via Command Line&lt;/a&gt;&lt;/p&gt;
</summary><category term="windows"></category><category term="config"></category><category term="ram"></category><category term="memory"></category></entry></feed>